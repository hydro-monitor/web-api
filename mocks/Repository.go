// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	db_models "hydro_monitor/web_api/pkg/models/db_models"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: args
func (_m *Repository) Delete(args db_models.DbDTO) error {
	ret := _m.Called(args)

	var r0 error
	if rf, ok := ret.Get(0).(func(db_models.DbDTO) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: args
func (_m *Repository) Get(args db_models.DbDTO) error {
	ret := _m.Called(args)

	var r0 error
	if rf, ok := ret.Get(0).(func(db_models.DbDTO) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: args
func (_m *Repository) Insert(args db_models.DbDTO) error {
	ret := _m.Called(args)

	var r0 error
	if rf, ok := ret.Get(0).(func(db_models.DbDTO) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: args, pageState, pageSize
func (_m *Repository) Select(args db_models.SelectDTO, pageState []byte, pageSize int) error {
	ret := _m.Called(args, pageState, pageSize)

	var r0 error
	if rf, ok := ret.Get(0).(func(db_models.SelectDTO, []byte, int) error); ok {
		r0 = rf(args, pageState, pageSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAll provides a mock function with given fields: args
func (_m *Repository) SelectAll(args db_models.SelectDTO) error {
	ret := _m.Called(args)

	var r0 error
	if rf, ok := ret.Get(0).(func(db_models.SelectDTO) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: args
func (_m *Repository) Update(args db_models.DbDTO) error {
	ret := _m.Called(args)

	var r0 error
	if rf, ok := ret.Get(0).(func(db_models.DbDTO) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
