// Code generated by mockery v2.2.1. DO NOT EDIT.

package repositories

import (
	db_models "hydro_monitor/web_api/pkg/models/db_models"

	mock "github.com/stretchr/testify/mock"
)

// RepositoryMock is an autogenerated mock type for the Repository type
type RepositoryMock struct {
	mock.Mock
}

// Delete provides a mock function with given fields: args
func (_m *RepositoryMock) Delete(args db_models.DbDTO) error {
	ret := _m.Called(args)

	var r0 error
	if rf, ok := ret.Get(0).(func(db_models.DbDTO) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: args
func (_m *RepositoryMock) Get(args db_models.DbDTO) error {
	ret := _m.Called(args)

	var r0 error
	if rf, ok := ret.Get(0).(func(db_models.DbDTO) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetColumns provides a mock function with given fields:
func (_m *RepositoryMock) GetColumns() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetPartitionKey provides a mock function with given fields:
func (_m *RepositoryMock) GetPartitionKey() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetSortingKey provides a mock function with given fields:
func (_m *RepositoryMock) GetSortingKey() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Insert provides a mock function with given fields: args
func (_m *RepositoryMock) Insert(args db_models.DbDTO) error {
	ret := _m.Called(args)

	var r0 error
	if rf, ok := ret.Get(0).(func(db_models.DbDTO) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SafeInsert provides a mock function with given fields: args
func (_m *RepositoryMock) SafeInsert(args db_models.DbDTO) (bool, error) {
	ret := _m.Called(args)

	var r0 bool
	if rf, ok := ret.Get(0).(func(db_models.DbDTO) bool); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(db_models.DbDTO) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SafeUpdate provides a mock function with given fields: args
func (_m *RepositoryMock) SafeUpdate(args db_models.DbDTO) (bool, error) {
	ret := _m.Called(args)

	var r0 bool
	if rf, ok := ret.Get(0).(func(db_models.DbDTO) bool); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(db_models.DbDTO) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Select provides a mock function with given fields: args, pageState, pageSize
func (_m *RepositoryMock) Select(args db_models.SelectDTO, pageState []byte, pageSize int) ([]byte, error) {
	ret := _m.Called(args, pageState, pageSize)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(db_models.SelectDTO, []byte, int) []byte); ok {
		r0 = rf(args, pageState, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(db_models.SelectDTO, []byte, int) error); ok {
		r1 = rf(args, pageState, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAll provides a mock function with given fields: args
func (_m *RepositoryMock) SelectAll(args db_models.SelectDTO) error {
	ret := _m.Called(args)

	var r0 error
	if rf, ok := ret.Get(0).(func(db_models.SelectDTO) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: args
func (_m *RepositoryMock) Update(args db_models.DbDTO) error {
	ret := _m.Called(args)

	var r0 error
	if rf, ok := ret.Get(0).(func(db_models.DbDTO) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
